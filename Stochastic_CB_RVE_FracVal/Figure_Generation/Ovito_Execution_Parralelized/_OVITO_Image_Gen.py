# Boilerplate code generated by OVITO Pro 3.4.3
from ovito.io import *
from ovito.modifiers import *
from ovito.pipeline import *
from ovito.vis import *
import sys
import os

# Data import:
file_base = sys.argv[1]
directory = sys.argv[2]
pixels = sys.argv[3]
XY = int(sys.argv[4])
CB = float(sys.argv[5])
pixel_a, pixel_b = pixels.split('x')
pixel_a = int(pixel_a)
pixel_b = int(pixel_b)
pic_folder = "/_" + str(XY) + "_" + str(CB) + "_" + str(pixels)

print("file: " + directory + "/" +  file_base[0:len(file_base)-3])
try:
	pipeline = import_file(directory + "/" +  file_base[0:len(file_base)-3], columns = ['Position.X', 'Position.Y', 'Position.Z', 'Radius'])
except:
	exit()
pipeline.add_to_scene()
# Configuring visual elements associated with imported dataset:
pipeline.compute().particles.vis.radius = 0.1

# Assign color:
pipeline.modifiers.append(AssignColorModifier(color = [0.0, 0.0, 0.0]))

# Set the box size
pipeline.modifiers.append(AffineTransformationModifier(target_cell = [[XY, 0.0, 0.0, 0.0], [0.0, XY, 0.0, 0.0], [0.0, 0.0, 2000.0, 0.0]], relative_mode = False, operate_on = {'cell', 'surfaces', 'voxels', 'dislocations', 'vector_properties'}))

# Viewport setup:
vp = Viewport(type = Viewport.Type.Top, fov = 22057.157676649775, camera_pos = (int(XY/2), int(XY/2), 0))

# Rendering:
print("Rendering")
image = vp.render_image(size=(pixel_a, pixel_b),renderer=TachyonRenderer())
image.save(directory + pic_folder + "/" + file_base[0:len(file_base)-3] + ".png")
pipeline.remove_from_scene()
print("Saved")
os.system("rm " + directory + "/" +  file_base[0:len(file_base)-3])
exit()
